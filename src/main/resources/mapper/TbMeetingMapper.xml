<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chenjx.office.api.mapper.TbMeetingMapper">

    <select id="searchOfflineMeetingByPage" parameterType="HashMap" resultType="HashMap">
        SELECT mr.name, temp.meeting FROM tb_meeting_room mr
        LEFT JOIN  (
        SELECT place,
        CONCAT(
        "[",
        GROUP_CONCAT(
        JSON_OBJECT(
        'start', DATE_FORMAT(start,'%H:%i'),
        'end', DATE_FORMAT(end,'%H:%i'),
        'status', `status`,
        'time', ROUND(timestampdiff(MINUTE,CONCAT(date," ",start),CONCAT(date," ",end))/30)
        )
        ),
        "]"
        ) AS meeting
        FROM tb_meeting
        WHERE type = 2 AND `status` != 2 AND date = #{date}
        <if test="mold=='我的会议'">
            AND JSON_CONTAINS(members, CAST(#{userId} AS CHAR))
        </if>
        GROUP BY place
        ) temp ON mr.name=temp.place
        WHERE mr.`status`=1
        LIMIT #{start}, #{length}
    </select>

    <select id="searchOfflineMeetingCount" parameterType="HashMap" resultType="long">
        SELECT COUNT(*)
        FROM tb_meeting_room
        WHERE status=1
    </select>

    <update id="updateMeetingInstanceId" parameterType="HashMap">
        UPDATE tb_meeting
        SET instance_id=#{instanceId}
        WHERE uuid=#{uuid}
    </update>

    <insert id="insert" parameterType="com.chenjx.office.api.entity.TbMeeting">
        INSERT INTO tb_meeting
        SET title = #{title},
        <if test="uuid!=null">
            uuid = #{uuid},
        </if>
        `date` = #{date},
        creator_id = #{creatorId},
        <if test="place!=null">
            place = #{place},
        </if>
        `start` = #{start},
        `end` = #{end},
        `type` = #{type},
        members = #{members},
        `desc` = #{desc},
        instance_id = #{instanceId},
        status = #{status},
        create_time = NOW()
    </insert>

    <select id="searchMeetingMembersInSameDept" parameterType="String" resultType="boolean">
        SELECT IF(COUNT(DISTINCT u.dept_id)=1,TRUE,FALSE ) AS bool
        FROM tb_meeting m
                 JOIN tb_user u ON JSON_CONTAINS ( m.members, CAST( u.id AS CHAR ) )
        WHERE m.uuid=#{uuid} AND u.status = 1
    </select>

    <select id="searchOfflineMeetingInWeek" parameterType="HashMap" resultType="HashMap">
        SELECT id,
        title,
        DATE_FORMAT(`date`,"%m/%d") AS `date`,
        DATE_FORMAT(start,'%H:%i') AS `start`,
        ROUND(timestampdiff(MINUTE,CONCAT(`date`," ",`start`),CONCAT(`date`," ",`end`))/30) AS time,
        uuid,
        instance_id AS instanceId,
        IF(creator_id=#{userId},"true","false") AS isCreator,
        `status`
        FROM tb_meeting
        WHERE type = 2
        AND place = #{place}
        AND `status` != 2
        AND date BETWEEN #{startDate} AND #{endDate}
        <if test="mold=='我的会议'">
            AND JSON_CONTAINS(members, CAST(#{userId} AS CHAR))
        </if>
    </select>

    <select id="searchMeetingInfo" parameterType="long" resultType="HashMap">
        SELECT m.title,
               m.date,
               m.place,
               DATE_FORMAT(m.`start`,'%H:%i') AS `start`,
               DATE_FORMAT(m.`end`,'%H:%i') AS `end`,
               m.status,
               CONCAT( "[",
                   GROUP_CONCAT( JSON_OBJECT ( "name", u.name, "photo", u.photo )),
                   "]" ) AS members
        FROM tb_meeting m
                 LEFT JOIN tb_user u ON JSON_CONTAINS ( m.members, CONVERT ( u.id, CHAR ) )
        WHERE m.id = #{id} AND u.status=1
        GROUP BY  m.id
    </select>

    <select id="searchCurrentMeetingInfo" parameterType="long" resultType="HashMap">
        SELECT m.title,
               m.date,
               m.place,
               DATE_FORMAT(m.`start`,'%H:%i') AS `start`,
               DATE_FORMAT(m.`end`,'%H:%i') AS `end`,
               m.status,
               (
                   SELECT CONCAT( "[",
                       GROUP_CONCAT( JSON_OBJECT ( "name", u.name, "photo", u.photo ) ),
                       "]" )
                   FROM tb_user u WHERE JSON_CONTAINS ( m.present, CONVERT ( u.id, CHAR ) )
               ) AS present,
               (
                   SELECT CONCAT( "[",
                       GROUP_CONCAT( JSON_OBJECT ( "name", u.name, "photo", u.photo ) ),
                       "]" )
                   FROM tb_user u WHERE JSON_CONTAINS ( m.unpresent, CONVERT ( u.id, CHAR ) )
               ) AS unpresent
        FROM  tb_meeting m
        WHERE m.id = #{id}
    </select>
</mapper>
